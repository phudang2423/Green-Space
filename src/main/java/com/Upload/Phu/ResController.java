package com.Upload.Phu;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;

@Controller
@RestController
@RequestMapping("/api/drive")
public class ResController {

    @Autowired
    private ResService resService;

    // üìå API T·∫£i ·∫£nh l√™n Google Drive
    @PostMapping("/upload")
    public ResponseEntity<String> uploadImage(@RequestParam("file") MultipartFile file,
                                              @RequestParam("folderId") String folderId) {
        try {
            String fileId = resService.uploadImage(file, folderId);
            return ResponseEntity.ok("T·∫£i ·∫£nh th√†nh c√¥ng! File ID: " + fileId);
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("L·ªói t·∫£i ·∫£nh: " + e.getMessage());
        }
    }

    // üìå API T·∫°o th∆∞ m·ª•c m·ªõi tr√™n Google Drive
    @PostMapping("/create-folder")
    public ResponseEntity<String> createFolder(@RequestParam String folderName, @RequestParam String parentFolderId) {
        try {
            String folderId = resService.createFolder(folderName, parentFolderId);
            return ResponseEntity.ok("T·∫°o th∆∞ m·ª•c th√†nh c√¥ng! Folder ID: " + folderId);
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("L·ªói t·∫°o th∆∞ m·ª•c: " + e.getMessage());
        }
    }

    // üìå API L·∫•y danh s√°ch t·∫•t c·∫£ th∆∞ m·ª•c trong Drive
    @GetMapping("/list-folders")
    public ResponseEntity<List<String>> listFolders() {
        try {
            List<String> folders = resService.listFolders();
            return ResponseEntity.ok(folders);
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    // üìå API L·∫•y danh s√°ch t·∫•t c·∫£ file trong m·ªôt th∆∞ m·ª•c c·ª• th·ªÉ
    @GetMapping("/list-files")
    public ResponseEntity<List<String>> listFiles(@RequestParam String folderId) {
        try {
            List<String> files = resService.listFiles(folderId);
            return ResponseEntity.ok(files);
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    // üìå API X√≥a t·ªáp ho·∫∑c th∆∞ m·ª•c (bao g·ªìm n·ªôi dung b√™n trong)
    @DeleteMapping("/delete")
    public ResponseEntity<String> deleteFile(@RequestParam String fileId) {
        try {
            resService.deleteFile(fileId);
            return ResponseEntity.ok("ƒê√£ x√≥a t·ªáp ho·∫∑c th∆∞ m·ª•c c√≥ ID: " + fileId);
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("L·ªói x√≥a file: " + e.getMessage());
        }
    }

    // üìå API X√≥a th∆∞ m·ª•c con trong th∆∞ m·ª•c cha
    @DeleteMapping("/delete-subfolder")
    public ResponseEntity<String> deleteSubFolder(@RequestParam String childFolderId) {
        try {
            resService.deleteSubFolder(childFolderId);
            return ResponseEntity.ok("ƒê√£ x√≥a th∆∞ m·ª•c con c√≥ ID: " + childFolderId);
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("L·ªói x√≥a th∆∞ m·ª•c con: " + e.getMessage());
        }
    }
}
